auto$'normalized-losses'<-as.numeric(auto$'normalized-losses')
auto$bore<-as.numeric(auto$bore)
auto$stroke<-as.numeric(auto$stroke)
auto$horsepower<-as.numeric(auto$horsepower)
auto$`peak-rpm`<-as.numeric(auto$`peak-rpm`)
str(auto)
meanloss<-NULL
for (i in -2:3){
temp<-mean(na.omit(auto$`normalized-losses`[auto$symboling==i]))
meanloss<-c(meanloss,temp)
}
for(i in 1:length(auto$`normalized-losses`)){
if(is.na(auto$`normalized-losses`[i])== 1){
auto$`normalized-losses`[i]<-meanloss[auto$symboling[i]+3]
print(auto$symboling[i]+3)
}
}
auto<-na.omit(auto)
aggr(auto,prop=TRUE)
auto
auto
write.csv(auto,file="auto.csv")
cor(auto$symboling,auto$price)
cor(auto$symboling,auto$`normalized-losses`)
cor(auto$symboling,auto$`normalized-losses`)
plot(auto$symboling,auto$price)
scaleplot<-function(data,name,iflog=0){
data<-data[c(1,which(colnames(data)==name))]
indexx=NULL
indexy=NULL
indextype=NULL
for (i in 1:length(name)){
indexx=c(indexx,1:nrow(data))
indexy=c(indexy,data[[name[i]]])
indextype=c(indextype,rep(name[i],nrow(data)))
}
if(iflog==1){
indexy=log(indexy)
}
plotdata<-data.frame(indexx,indexy,indextype)
p<-ggplot(plotdata,aes(x=indexx,y=indexy,group=indextype,colour=indextype))+geom_line()
p
}
scaleplot(auto,colnames(auto),iflog=1)
aggr(auto,prop=TRUE)
auto<-auto[auto$`num-of-doors`!="?",]
auto
write.csv(auto,"auto.csv")
library(VIM)
library(ggplot2)
auto<-read.csv("imports-85data.csv")
colnames(auto)<-c("symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style",
"drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type",
"num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower",
"peak-rpm","city-mpg","highway-mpg","price")
auto
autonumericed<-auto[c(1,2,10:14,17,19:26)]
scaleplot(autonumericed,colnames(autonumericed),iflog=1)
autonumericed
library(VIM)
library(ggplot2)
auto<-read.csv("imports-85data.csv")
colnames(auto)<-c("symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style",
"drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type",
"num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower",
"peak-rpm","city-mpg","highway-mpg","price")
auto
auto$price<-as.numeric(auto$price)
auto$'normalized-losses'<-as.numeric(auto$'normalized-losses')
auto$bore<-as.numeric(auto$bore)
auto$stroke<-as.numeric(auto$stroke)
auto$horsepower<-as.numeric(auto$horsepower)
auto$`peak-rpm`<-as.numeric(auto$`peak-rpm`)
auto<-auto[auto$`num-of-doors`!="?",]
str(auto)
meanloss<-NULL
for (i in -2:3){
temp<-mean(na.omit(auto$`normalized-losses`[auto$symboling==i]))
meanloss<-c(meanloss,temp)
}
for(i in 1:length(auto$`normalized-losses`)){
if(is.na(auto$`normalized-losses`[i])== 1){
auto$`normalized-losses`[i]<-meanloss[auto$symboling[i]+3]
print(auto$symboling[i]+3)
}
}
auto<-na.omit(auto)
aggr(auto,prop=TRUE)
write.csv(auto,"auto.csv")
aggr(auto,prop=TRUE)
cor(auto$symboling,auto$price)
cor(auto$symboling,auto$`normalized-losses`)
plot(auto$symboling,auto$price)
autonumericed<-auto[c(1,2,10:14,17,19:26)]
autonumericed
scaleplot<-function(data,name,iflog=0){
data<-data[c(1,which(colnames(data)==name))]
indexx=NULL
indexy=NULL
indextype=NULL
for (i in 1:length(name)){
indexx=c(indexx,1:nrow(data))
indexy=c(indexy,data[[name[i]]])
indextype=c(indextype,rep(name[i],nrow(data)))
}
if(iflog==1){
indexy=log(indexy)
}
plotdata<-data.frame(indexx,indexy,indextype)
p<-ggplot(plotdata,aes(x=indexx,y=indexy,group=indextype,colour=indextype))+geom_line()
p
}
scaleplot(autonumericed,colnames(autonumericed),iflog=1)
numeric.pca<-prcomp(autonumericed)
numeric.pca
numeric.pca<-prcomp(autonumericed,center = TRUE,scale. = TRUE)
numeric.pca
lm(symboling~. ,data=auto)
step(simplelinear)
simplelinear<-lm(symboling~. ,data=auto)
step(simplelinear)
summary(step(simplelinear))
simplelinear<-lm(symboling~. ,data=auto)
summary(simplelinear)
auto
ncol(auto)
wss <- numeric(15)
for (k in 1:15) wss[k] <- sum(kmeans(auto[3:26], centers=k, nstart=25)$withinss)
auto
auto[3:26]
for (k in 1:15) wss[k] <- sum(kmeans(auto[3:26], centers=k, nstart=25)$withinss)
for (k in 1:15) {wss[k] <- sum(kmeans(auto[3:26], centers=k, nstart=25)$withinss)}
library(gridExtra)
library(grid)
wss <- numeric(15)
for (k in 1:15) {wss[k] <- sum(kmeans(auto[3:26], centers=k, nstart=25)$withinss)}
kmeans(auto[3:26])
kmeans(auto[3:26],centers = 4)
auto
for (k in 1:15) {wss[k] <- sum(kmeans(autonumericed, centers=k, nstart=25)$withinss)}
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within Sum of Squares")
install.packages("lars")
install.packages("lars")
cov(auto)
cov(autonumericed)
library(lars)
lar<-lars(x=auto[,3:25],y=auto[,26],type = "lar")
auto
dummymake <- model.matrix(~make, auto)
dummymake
auto
dummymake <- model.matrix(~make+drive~wheels, auto)
dummymake <- model.matrix(~make+drive-wheels, auto)
dummymake <- model.matrix(~make+`drive-wheels`, auto)
dummymake
dummymake <- model.matrix(~make+`ful-type`+`aspiration`+`num-of-doors`+`body-style`+`eigine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
dummymake <- model.matrix(~make+`fuel-type`+`aspiration`+`num-of-doors`+`body-style`+`eigine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
dummymake <- model.matrix(~make+`fuel-type`+`aspiration`+`num-of-doors`+`body-style`+`engine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
dummymake
dummymake[-1]
dummymake
dummymake <- model.matrix(~make+`fuel-type`+`aspiration`+`num-of-doors`+`body-style`+`engine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
class(dummymake)
dummymake
dummymake[1]
dummymake[1:]
dummymake[1,]
as.data.frame(dummymake)
as.data.frame(dummymake)[-1]
rbind(autonumericed,as.data.frame(dummymake)[-1])
cbind(autonumericed,as.data.frame(dummymake)[-1])
autonumericed<-cbind(autonumericed,as.data.frame(dummymake)[-1])
autonumericed
autonumericed[-1,-2,-26]
autonumericed[,c(-1,-2,-26)]
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=auto[,26],type = "lar")
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],type = "lar")
autonumericed[,c(-1,-2,-26)]
class(autonumericed)
sapply(autonumeric, as.numeric)
sapply(autonumericed, as.numeric)
autonumericed<-sapply(autonumericed, as.numeric)
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],type = "lar")
summary(lar)
lar$R2
lar$lambda
lar
predict(lar,autonumericed[,c(-1,-2,-26)])
plot(lar)
lar
class(lar)
lar
lar$call
lar$entry
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],type = "lasso")
summary(lar)
View(dummymake)
lar$entry
summary(lar)
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],type = "lar",max.steps = 17)
summary(lar)
summary(lar)
lar
lar$R2
lar$actions
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],type = "lar")
plot(lar)
install.packages("rpart")
install.packages("rpart.plot")
write.csv(autonumericed,"autonumericed.csv")
install.packages("rpart.plot")
install.packages("rpart")
install.packages("rpart")
library(rpart)
library(rpart.plot)
set.seed(233)
index<-sample(1:nrow(autonumericed),round(nrow(autonumericed)*2/10))
autonumericed<-autonumericed[,c(-2)]
autonumericedtest<-autonumericed[index,]
autonumericedtraining<-wine[-index,]
tree<-rpart(symboling~.,autonumericed,method="class")
,]
autonumericed
autonumericedtest<-autonumericed[index,]
autonumericedtraining<-autonumericed[-index,]
tree<-rpart(symboling~.,autonumericed,method="class")
tree<-rpart(symboling~.,autonumericedtraining,method="class")
class(autonumericedtraining)
write.csv(autonumericedtraining,"sample.csv")
autonumericed<-as.data.frame(autonumericed)
autonumericedtest<-autonumericed[index,]
autonumericedtraining<-autonumericed[-index,]
tree<-rpart(symboling~.,autonumericedtraining,method="class")
autonumericedtraining
tree<-rpart(symboling~.,autonumericedtraining,method="class")
tree<-rpart(symboling~width.,autonumericedtraining,method="class")
autonumericedtraining
tree<-rpart(symboling~.,data=autonumericedtraining,method="class")
autonumericedtraining
autonumericedtraining
tree<-rpart(symboling ~. , data=autonumericedtraining,method="class")
autonumericedtraining$symboling
tree<-rpart(factor(symboling) ~. , data=autonumericedtraining,method="class")
tree<-rpart(factor(autonumericedtraining$symboling) ~. , data=autonumericedtraining,method="class")
tree<-rpart(factor(autonumericedtraining$symboling) ~ . , data=autonumericedtraining,method="class")
tree<-rpart(factor(autonumericedtraining$symboling) ~ . , data=autonumericedtraining, method ="class")
summary(lar)
lar
lar$call
lar$type
lar$df
lar$lambda
library(msgps)
install.packages("msgps")
library(msgps)
auto<-read.csv("imports-85data.csv")
colnames(auto)<-c("symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style",
"drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type",
"num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower",
"peak-rpm","city-mpg","highway-mpg","price")
auto$price<-as.numeric(auto$price)
auto$'normalized-losses'<-as.numeric(auto$'normalized-losses')
auto$bore<-as.numeric(auto$bore)
auto$stroke<-as.numeric(auto$stroke)
auto$horsepower<-as.numeric(auto$horsepower)
auto$`peak-rpm`<-as.numeric(auto$`peak-rpm`)
auto<-auto[auto$`num-of-doors`!="?",]
str(auto)
meanloss<-NULL
for (i in -2:3){
temp<-mean(na.omit(auto$`normalized-losses`[auto$symboling==i]))
meanloss<-c(meanloss,temp)
}
for(i in 1:length(auto$`normalized-losses`)){
if(is.na(auto$`normalized-losses`[i])== 1){
auto$`normalized-losses`[i]<-meanloss[auto$symboling[i]+3]
print(auto$symboling[i]+3)
}
}
auto<-na.omit(auto)
aggr(auto,prop=TRUE)
write.csv(auto,"auto.csv")
dummymake <- model.matrix(~make+`fuel-type`+`aspiration`+`num-of-doors`+`body-style`+`engine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
autonumericed<-cbind(autonumericed,as.data.frame(dummymake)[-1])
autonumericed
autonumericed<-auto[c(1,2,10:14,17,19:26)]
dummymake <- model.matrix(~make+`fuel-type`+`aspiration`+`num-of-doors`+`body-style`+`engine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
autonumericed<-cbind(autonumericed,as.data.frame(dummymake)[-1])
autonumericed
library(msgps)
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],type = "lar")
autonumericed<-sapply(autonumericed, as.numeric)
lar<-lars(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],type = "lar")
lar
al=msgps(x=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],penalty="alasso",gamma=1,lambda=0)
al=msgps(X=autonumericed[,c(-1,-2,-26)],y=autonumericed[,26],penalty="alasso",gamma=1,lambda=0)
class(autonumericed)
set.seed(233)
autonumericed<-as.data.frame(autonumericed)
index<-sample(1:nrow(autonumericed),round(nrow(autonumericed)*2/10))
autonumeric<-autonumericed
autonumeric<-autonumericed[,c(-2)]
autonumeric<-autonumericed
autonumericed<-autonumericed[,c(-2)]
autonumericedtest<-autonumericed[index,]
autonumericedtraining<-autonumericed[-index,]
tree<-rpart(factor(autonumericedtraining$symboling) ~ . , data=autonumericedtraining, method ="class")
autonumericedtraining
lm(autonumericedtraining$symboling~.)
lm(autonumericedtraining$symboling~.,data=autonumericedtraining)
tree<-rpart(autonumericedtraining$symboling ~ . , data=autonumericedtraining, method ="class")
autonumericedtraining$symboling
tree<-rpart(symboling ~ . , data=autonumericedtraining, method ="class")
tree<-rpart(symboling ~ . , data=autonumericedtraining)
tree<-rpart(height ~ . , data=autonumericedtraining)
lm(symboling~.,data=autonumericedtraining)
tree<-rpart(symboling ~. , data=autonumericedtraining)
tree<-rpart(symboling ~height , data=autonumericedtraining)
tree
tree<-rpart(symboling ~ . , data=autonumericedtraining)
colnames(autonumericedtraining)
tree<-rpart(symboling ~  , data=autonumericedtest)
tree<-rpart(symboling ~ . , data=autonumericedtest)
class(autonumericedtraining)
colnames(autonumericedtraining)
autonumericedtraining
autonumericedtraining$symboling
rpart(symboling ~ . , data=autonumericedtraining)
head(autonumericedtraining)
rpart(symboling ~ . , data=autonumericed)
autonumericed
write.csv(autonumericed,"autonumericed.csv")
setwd(/Users/mayuheng/Desktop/tsinghuasummercamp)
setwd("/Users/mayuheng/Desktop/tsinghuasummercamp")
autonumericed<-read.csv("autonumericed.csv")
tree<-rpart(symboling ~ . , data=autonumericed,method = "class")
library(rpart)
tree<-rpart(symboling ~ . , data=autonumericed,method = "class")
a<-prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
library(rpart.plot)
a<-prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
a
prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
plot(tree,compress=T,margin=0.2)
wss <- numeric(15)
for (k in 1:15) {wss[k] <- sum(kmeans(autonumericed, centers=k, nstart=25)$withinss)}
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within Sum of Squares")
prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
plot(tree,compress=T,margin=0.2)
prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
plot(tree,margin=0.2)
tree<-rpart(symboling~wheelbase+height+enginesize
+horsepower+price+aspirationturbo+X.num.of.doors.two
+X.drive.wheels.fwd+X.drive.wheels.rwd+
X.engine.type.l+X.engine.type.ohc+
X.engine.type.ohcf+X.engine.type.ohcv+
X.num.of.cylinders.five+X.num.of.cylinders.four+
X.num.of.cylinders.six+X.num.of.cylinders.three+
X.num.of.cylinders.twelve , data=autonumericed,method = "class")
tree<-rpart(symboling~wheel.base+height+enginesize
+horsepower+price+aspirationturbo+X.num.of.doors.two
+X.drive.wheels.fwd+X.drive.wheels.rwd+
X.engine.type.l+X.engine.type.ohc+
X.engine.type.ohcf+X.engine.type.ohcv+
X.num.of.cylinders.five+X.num.of.cylinders.four+
X.num.of.cylinders.six+X.num.of.cylinders.three+
X.num.of.cylinders.twelve , data=autonumericed,method = "class")
tree<-rpart(symboling~wheel.base+height+engine.size
+horsepower+price+aspirationturbo+X.num.of.doors.two
+X.drive.wheels.fwd+X.drive.wheels.rwd+
X.engine.type.l+X.engine.type.ohc+
X.engine.type.ohcf+X.engine.type.ohcv+
X.num.of.cylinders.five+X.num.of.cylinders.four+
X.num.of.cylinders.six+X.num.of.cylinders.three+
X.num.of.cylinders.twelve , data=autonumericed,method = "class")
prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
km<-kmeans(autonumericed, centers=3, nstart=25)
clustering<-rbind(autonumericed,km$cluster)
class(clustering)
library(ggplot2)
clustering
autonumeric
autonumericed
auto
auto<-read.csv("imports-85data.csv")
colnames(auto)<-c("symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style",
"drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type",
"num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower",
"peak-rpm","city-mpg","highway-mpg","price")
auto$price<-as.numeric(auto$price)
auto$'normalized-losses'<-as.numeric(auto$'normalized-losses')
auto$bore<-as.numeric(auto$bore)
auto$stroke<-as.numeric(auto$stroke)
auto$horsepower<-as.numeric(auto$horsepower)
auto$`peak-rpm`<-as.numeric(auto$`peak-rpm`)
auto<-auto[auto$`num-of-doors`!="?",]
str(auto)
meanloss<-NULL
for (i in -2:3){
temp<-mean(na.omit(auto$`normalized-losses`[auto$symboling==i]))
meanloss<-c(meanloss,temp)
}
for(i in 1:length(auto$`normalized-losses`)){
if(is.na(auto$`normalized-losses`[i])== 1){
auto$`normalized-losses`[i]<-meanloss[auto$symboling[i]+3]
print(auto$symboling[i]+3)
}
}
auto<-na.omit(auto)
aggr(auto,prop=TRUE)
library(VIM)
library(ggplot2)
library(gridExtra)
library(grid)
library(lars)
auto
linear<-lm('normalized-losses'~.,data=auto)
linear<-lm(normalized-losses~.,data=auto)
linear<-lm(normalized`-losses~.,data=auto)
linear<-lm(normalized`-losses~.,data=auto)
linear<-lm(normalized`-losses~.,data=auto)
linear<-lm(auto$`normalized-losses`~.,data=auto)
linear
summary(linear)
step(linear)
linear<-step(linear)
linear
auto$symboling
auto$symboling==-2
sum(auto$symboling==-2)
predict(linear,auto)
plot(linear)
linear<-lm(`normalized-losses`~.,data=auto)
plot(linear)
linear<-step(linear)
plot(linear)
lar<-lars(x=auto[,3:25],y=auto[,26],type = "lar")
autonumericed
lar<-lars(x=autonumericed[,c(-1,-2,-16)],y=autonumericed[,16],type = "lar")
autonumericed[,c(-1,-2,-16)]
autonumericed[,c(-1,-2,-16)]
autonumericed<-sapply(autonumericed, as.numeric)
lar<-lars(x=autonumericed[,c(-1,-2,-16)],y=autonumericed[,16],type = "lar")
lar
summary(lar)
lar
autonumericed<-sapply(autonumericed, as.numeric)
autonumericed
autonumericed
autonumericed
class(autonumericed)
autonumericed<-auto[c(1,2,10:14,17,19:26)]
dummymake <- model.matrix(~make+`fuel-type`+`aspiration`+`num-of-doors`+`body-style`+`engine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
autonumericed<-cbind(autonumericed,as.data.frame(dummymake)[-1])
autonumericed<-sapply(autonumericed, as.numeric)
autonumericed
colnames(autonumericed)
colnames(autonumericed)[16]
lar<-lars(x=autonumericed[,c(-1,-2,-16)],y=autonumericed[,16],type = "lar")
summary(lar)
autonumericed<-auto[c(1,2,10:14,17,19:26)]
View(autonumericed)
autonumericed<-sapply(autonumericed, as.numeric)
autonumericed
lar<-lars(x=autonumericed[,c(-1,-2,-16)],y=autonumericed[,16],type = "lar")
summary(lar)
coef<-coef.lars(lar,mode="step",s=7)
coef[coef!=0]
autonumericed
autonumericed<-auto[c(1,2,10:14,17,19:26)]
dummymake <- model.matrix(~make+`fuel-type`+`aspiration`+`num-of-doors`+`body-style`+`engine-location`+`engine-type`+`drive-wheels`+`num-of-cylinders`+`fuel-system`, auto)
autonumericed<-cbind(autonumericed,as.data.frame(dummymake)[-1])
autonumericed<-sapply(autonumericed, as.numeric)
autonumericed
colnames(autonumericed)
colnames(autonumericed)[16]
rpartTrue=train(autonumericed[,c(-1,-16)],autonumericed[,16],method="rpart2",tuneLength=10,trControl=trainControl(method="cv"))
library(tree)
library(rpart)
rpartTrue=train(autonumericed[,c(-1,-16)],autonumericed[,16],method="rpart2",tuneLength=10,trControl=trainControl(method="cv"))
rpartTrue=train(autonumericed[,c(-1,-16)],autonumericed[,16],method="rpart2",tuneLength=10,trControl=trainControl(method="cv"))
install.packages("generics")
install.packages("generics")
library(generics)
rpartTrue=train(autonumericed[,c(-1,-16)],autonumericed[,16],method="rpart2",tuneLength=10,trControl=trainControl(method="cv"))
autonumericed
class(autonumericed)
autonumericed<-as.data.frame(autonumericed)
rpartTrue=train(autonumericed[,c(-1,-16)],autonumericed[,16],method="rpart2",tuneLength=10,trControl=trainControl(method="cv"))
rpartTrue=train(autonumericed[,c(-1,-16)],autonumericed[,16],method="rpart2",tuneLength=10,trControl=trainControl(method="cv"))
rpart(price~.,autonumericed)
rpart(prices~.,autonumericed)
rpart(prices~.,data=autonumericed)
rpart(price~.,data=autonumericed)
rpart(symboling~.,data=autonumericed)
autonumericed
library(rpart)
autonumericed<-read.csv("autonumericed.csv")
rpart(symboling~.,data=autonumericed)
library(rpart.plot)
prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
tree<-rpart(symboling~.,data=autonumericed)
prp(tree,type=4,extra=2,digits=3)#此处type参数为0~5
plotcp(tree)
plot(tree)
printcp(tree)
install.packages("partykit")
install.packages("partykit")
install.packages("partykit")
partykit
install.packages("partykit")
install.packages("partykit")
